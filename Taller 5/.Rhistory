Compg_obama <- induced_subgraph(graph = g_obama0, vids = which(V(g_obama0)$cluster == which.max(clusters(graph = g_obama0)$csize)))
# Grafos
par(mfrow=c(1,2))
set.seed(34)
plot(g_obama1, layout = layout_with_fr, vertex.color = "dodgerblue4", vertex.frame.color = "dodgerblue4", vertex.size = 3, vertex.label.color = 'black', vertex.label.cex = 1, vertex.label.dist = 1, main = "Obama\n umbral = 2")
set.seed(123)
plot(g_obama0, layout = layout_with_fr, vertex.color = "dodgerblue4", vertex.frame.color = "dodgerblue4", vertex.size = 3, vertex.label = NA, vertex.label.color = 'black', vertex.label.cex = 1, vertex.label.dist = 1, main = "Obama\n umbral = 1")
# componente gigante
par(mfrow = c(1,1), mar = c(1,1,2,1), mgp = c(1,1,1))
# tamaño de vertices según la fuerza del mismo, grosor de aristas según la proporción del peso de la misma
set.seed(123)
plot(Compg_obama, layout = layout_with_kk, vertex.color = adjustcolor("dodgerblue4", 0.1), vertex.frame.color = "dodgerblue4", vertex.size = 2*strength(Compg_obama), vertex.label.color = 'black', vertex.label.cex = 0.6, vertex.label.dist = 1, edge.width = 3*E(g_obama0)$weight/max(E(g_obama0)$weight))
title(main = "Componente conexa - Bigrama Obama", outer = T, line = -1)
#---------------------------------------------------------------------------------- Trump
# grafo con umbral=2
g_trump1 <- text_trump_bi_counts %>%
filter(weight > 1) %>%
graph_from_data_frame(directed = FALSE)
# grafo con umbral=1
g_trump0 <- text_trump_bi_counts %>%
filter(weight > 0) %>%
graph_from_data_frame(directed = FALSE)
# grafo inducido por la componente conexa más grande
V(g_trump0)$cluster <- clusters(graph = g_trump0)$membership
Compg_trump <- induced_subgraph(graph = g_trump0, vids = which(V(g_trump0)$cluster == which.max(clusters(graph = g_trump0)$csize)))
#### Grafos
par(mfrow=c(1,2))
set.seed(1234)
plot(g_trump1, layout = layout_with_fr, vertex.color = "firebrick2", vertex.frame.color = "firebrick2", vertex.size = 3, vertex.label.color = 'black', vertex.label.cex = 1, vertex.label.dist = 1, main = "Trump\n umbral = 2")
set.seed(123)
plot(g_trump0, layout = layout_with_fr, vertex.color = "firebrick2", vertex.frame.color = "firebrick2", vertex.size = 3, vertex.label = NA, vertex.label.color = 'black', vertex.label.cex = 1, vertex.label.dist = 1, main = "Trump\n umbral = 1")
# componente gigante
par(mfrow = c(1,1), mar = c(1,1,2,1), mgp = c(1,1,1))
# tamaño de vertices según la fuerza del mismo, grosor de aristas según la proporción del peso de la misma
set.seed(123)
plot(Compg_trump, layout = layout_with_kk, vertex.color = adjustcolor("firebrick2", 0.1), vertex.frame.color = "firebrick2", vertex.size = 2*strength(Compg_trump), vertex.label.color = 'black', vertex.label.cex = 0.6, vertex.label.dist = 1, edge.width = 3*E(g_trump0)$weight/max(E(g_trump0)$weight))
title(main = "Componente conexa - Bigrama Trump", outer = T, line = -1)
#---------------------------------------------------------------------------------- Biden
# grafo con umbral=2
g_biden1 <- text_biden_bi_counts %>%
filter(weight > 1) %>%
graph_from_data_frame(directed = FALSE)
# grafo con umbral=1
g_biden0 <- text_biden_bi_counts %>%
filter(weight > 0) %>%
graph_from_data_frame(directed = FALSE)
# grafo inducido por la componente conexa más grande
V(g_biden0)$cluster <- clusters(graph = g_biden0)$membership
Compg_biden <- induced_subgraph(graph = g_biden0, vids = which(V(g_biden0)$cluster == which.max(clusters(graph = g_biden0)$csize)))
# Grafos
par(mfrow=c(1,2))
set.seed(1234)
plot(g_biden1, layout = layout_with_fr, vertex.color = "dodgerblue4", vertex.frame.color = "dodgerblue4", vertex.size = 3, vertex.label.color = 'black', vertex.label.cex = 1, vertex.label.dist = 1, main = "Biden \n umbral = 2")
set.seed(123)
plot(g_biden0, layout = layout_with_fr, vertex.color = "dodgerblue4", vertex.frame.color = "dodgerblue4", vertex.size = 3, vertex.label = NA, vertex.label.color = 'black', vertex.label.cex = 1, vertex.label.dist = 1, main = "Biden\n umbral = 1")
# componente gigante
par(mfrow = c(1,1), mar = c(1,1,2,1), mgp = c(1,1,1))
# tamaño de vertices según la fuerza del mismo, grosor de aristas según la proporción del peso de la misma
set.seed(123)
plot(Compg_biden, layout = layout_with_kk, vertex.color = adjustcolor("dodgerblue4", 0.1), vertex.frame.color = "dodgerblue4", vertex.size = 2*strength(Compg_biden), vertex.label.color = 'black', vertex.label.cex = 0.6, vertex.label.dist = 1, edge.width = 3*E(g_biden0)$weight/max(E(g_biden0)$weight))
title(main = "Componente conexa - Bigrama Biden", outer = T, line = -1)
text_bush_skip <- text_bush_st %>%
unnest_tokens(tbl = ., input = text, output = skipgram, token = "skip_ngrams", n = 2) %>%
filter(!is.na(skipgram))
text_obama_skip <- text_obama_st %>%
unnest_tokens(tbl = ., input = text, output = skipgram, token = "skip_ngrams", n = 2) %>%
filter(!is.na(skipgram))
text_trump_skip <- text_trump_st %>%
unnest_tokens(tbl = ., input = text, output = skipgram, token = "skip_ngrams", n = 2) %>%
filter(!is.na(skipgram))
text_biden_skip <- text_biden_st %>%
unnest_tokens(tbl = ., input = text, output = skipgram, token = "skip_ngrams", n = 2) %>%
filter(!is.na(skipgram))
dim(text_bush_skip)
dim(text_obama_skip)
dim(text_trump_skip)
dim(text_biden_skip)
#----------------------------------------------------------------------------- Bush
# contar palabras en cada skip-gram
text_bush_skip$num_words <- text_bush_skip$skipgram %>%
map_int(.f = ~ wordcount(.x))
head(text_bush_skip, n = 10)
# remover unigramas
text_bush_skip %<>%
filter(num_words == 2) %>%
select(-num_words)
dim(text_bush_skip)
#----------------------------------------------------------------------------- Obama
# contar palabras en cada skip-gram
text_obama_skip$num_words <- text_obama_skip$skipgram %>%
map_int(.f = ~ wordcount(.x))
head(text_obama_skip, n = 10)
# remover unigramas
text_obama_skip %<>%
filter(num_words == 2) %>%
select(-num_words)
dim(text_obama_skip)
#----------------------------------------------------------------------------------------- Trump
# contar palabras en cada skip-gram
text_trump_skip$num_words <- text_trump_skip$skipgram %>%
map_int(.f = ~ wordcount(.x))
head(text_trump_skip, n = 10)
# remover unigramas
text_trump_skip %<>%
filter(num_words == 2) %>%
select(-num_words)
dim(text_trump_skip)
#----------------------------------------------------------------------------------------- Biden
# contar palabras en cada skip-gram
text_biden_skip$num_words <- text_biden_skip$skipgram %>%
map_int(.f = ~ wordcount(.x))
head(text_biden_skip, n = 10)
# remover unigramas
text_biden_skip %<>%
filter(num_words == 2) %>%
select(-num_words)
dim(text_biden_skip)
#----------------------------------------------------------------------------------------- Bush
text_bush_skip %>%
separate(skipgram, c("word1", "word2"), sep = " ") %>%
filter(!grepl(pattern = '[0-9]', x = word1)) %>%          # se eliminan los números
filter(!grepl(pattern = '[0-9]', x = word2)) %>%
filter(!word1 %in% stop_words$word) %>%                   # se eliminan las stop_words
filter(!word2 %in% stop_words$word) %>%
filter(!is.na(word1)) %>%
filter(!is.na(word2)) %>%
count(word1, word2, sort = TRUE) %>%
rename(weight = n) -> text_bush_skip_counts              # el peso de cada pareja de palabras (bigrama) es su frecuencia
#----------------------------------------------------------------------------------------- Obama
text_obama_skip %>%
separate(skipgram, c("word1", "word2"), sep = " ") %>%
filter(!grepl(pattern = '[0-9]', x = word1)) %>%          # se eliminan los números
filter(!grepl(pattern = '[0-9]', x = word2)) %>%
filter(!word1 %in% stop_words$word) %>%                   # se eliminan las stop_words
filter(!word2 %in% stop_words$word) %>%
filter(!is.na(word1)) %>%
filter(!is.na(word2)) %>%
count(word1, word2, sort = TRUE) %>%
rename(weight = n) -> text_obama_skip_counts              # el peso de cada pareja de palabras (bigrama) es su frecuencia
#---------------------------------------------------------------------------------------- Trump
text_trump_skip %>%
separate(skipgram, c("word1", "word2"), sep = " ") %>%
filter(!grepl(pattern = '[0-9]', x = word1)) %>%          # se eliminan los números
filter(!grepl(pattern = '[0-9]', x = word2)) %>%
filter(!word1 %in% stop_words$word) %>%                   # se eliminan las stop_words
filter(!word2 %in% stop_words$word) %>%
filter(!is.na(word1)) %>%
filter(!is.na(word2)) %>%
count(word1, word2, sort = TRUE) %>%
rename(weight = n) -> text_trump_skip_counts              # el peso de cada pareja de palabras (bigrama) es su frecuencia
#---------------------------------------------------------------------------------------- Biden
text_biden_skip %>%
separate(skipgram, c("word1", "word2"), sep = " ") %>%
filter(!grepl(pattern = '[0-9]', x = word1)) %>%          # se eliminan los números
filter(!grepl(pattern = '[0-9]', x = word2)) %>%
filter(!word1 %in% stop_words$word) %>%                   # se eliminan las stop_words
filter(!word2 %in% stop_words$word) %>%
filter(!is.na(word1)) %>%
filter(!is.na(word2)) %>%
count(word1, word2, sort = TRUE) %>%
rename(weight = n) -> text_biden_skip_counts              # el peso de cada pareja de palabras (bigrama) es su frecuencia
dim(text_bush_skip_counts)
dim(text_obama_skip_counts)
dim(text_trump_skip_counts)
dim(text_biden_skip_counts)
head(text_bush_skip_counts, n = 10)
head(text_obama_skip_counts, n = 10)
head(text_trump_skip_counts, n = 10)
head(text_biden_skip_counts, n = 10)
#---------------------------------------------------------------------------------------- Bush
##### definir una red a partir de la frecuencia (weight) de los bigramas
g_bush_sk <- text_bush_skip_counts %>%
filter(weight > 0) %>%
graph_from_data_frame(directed = FALSE)
g_bush_sk <- igraph::simplify(g_bush_sk)
# grafo inducido por la componente conexa
V(g_bush_sk)$cluster <- clusters(graph = g_bush_sk)$membership
Compg_bush_sk <- induced_subgraph(graph = g_bush_sk, vids = which(V(g_bush_sk)$cluster == which.max(clusters(graph = g_bush_sk)$csize)))
### Grafos
par(mfrow = c(1,1), mar = c(1,1,2,1), mgp = c(1,1,1))
# tamaño de vertices según la fuerza del mismo
set.seed(123)
plot(Compg_bush_sk, layout = layout_with_fr, vertex.color = adjustcolor("firebrick2", 0.1), vertex.frame.color = "firebrick2", vertex.size = 2*strength(Compg_bush_sk), vertex.label = NA)
title(main = "Componente conexa - Skip-grama Bush", outer = T, line = -1)
#---------------------------------------------------------------------------------------- Obama
##### definir una red a partir de la frecuencia (weight) de los bigramas
g_obama_sk <- text_obama_skip_counts %>%
filter(weight > 0) %>%
graph_from_data_frame(directed = FALSE)
g_obama_sk <- igraph::simplify(g_obama_sk)
# grafo inducido por la componente conexa
V(g_obama_sk)$cluster <- clusters(graph = g_obama_sk)$membership
Compg_obama_sk <- induced_subgraph(graph = g_obama_sk, vids = which(V(g_obama_sk)$cluster == which.max(clusters(graph = g_obama_sk)$csize)))
### Grafos
par(mfrow = c(1,1), mar = c(1,1,2,1), mgp = c(1,1,1))
# tamaño de vertices según la fuerza del mismo
set.seed(123)
plot(Compg_obama_sk, layout = layout_with_fr, vertex.color = adjustcolor("dodgerblue4", 0.1), vertex.frame.color = "dodgerblue4", vertex.size = 2*strength(Compg_obama_sk), vertex.label = NA)
title(main = "Componente conexa - Skip-grama Obama", outer = T, line = -1)
#---------------------------------------------------------------------------------------- Trump
##### definir una red a partir de la frecuencia (weight) de los bigramas
g_trump_sk <- text_trump_skip_counts %>%
filter(weight > 0) %>%
graph_from_data_frame(directed = FALSE)
g_trump_sk <- igraph::simplify(g_trump_sk)
# grafo inducido por la componente conexa
V(g_trump_sk)$cluster <- clusters(graph = g_trump_sk)$membership
Compg_trump_sk <- induced_subgraph(graph = g_trump_sk, vids = which(V(g_trump_sk)$cluster == which.max(clusters(graph = g_trump_sk)$csize)))
### Grafos
par(mfrow = c(1,1), mar = c(1,1,2,1), mgp = c(1,1,1))
# tamaño de vertices según la fuerza del mismo
set.seed(123)
plot(Compg_trump_sk, layout = layout_with_fr, vertex.color = adjustcolor("firebrick2", 0.1), vertex.frame.color = "firebrick2", vertex.size = 2*strength(Compg_trump_sk), vertex.label = NA)
title(main = "Componente conexa - Skip-grama Trump", outer = T, line = -1)
#---------------------------------------------------------------------------------------- Biden
##### definir una red a partir de la frecuencia (weight) de los bigramas
g_biden_sk <- text_biden_skip_counts %>%
filter(weight > 0) %>%
graph_from_data_frame(directed = FALSE)
g_biden_sk <- igraph::simplify(g_biden_sk)
# grafo inducido por la componente conexa
V(g_biden_sk)$cluster <- clusters(graph = g_biden_sk)$membership
Compg_biden_sk <- induced_subgraph(graph = g_biden_sk, vids = which(V(g_biden_sk)$cluster == which.max(clusters(graph = g_biden_sk)$csize)))
### Grafos
par(mfrow = c(1,1), mar = c(1,1,2,1), mgp = c(1,1,1))
# tamaño de vertices según la fuerza del mismo
set.seed(123)
plot(Compg_biden_sk, layout = layout_with_fr, vertex.color = adjustcolor("dodgerblue4", 0.1), vertex.frame.color = "dodgerblue4", vertex.size = 2*strength(Compg_biden_sk), vertex.label = NA)
title(main = "Componente conexa - Skip-grama Biden", outer = T, line = -1)
estad <- function(grafo, presi){
dist_geo <- mean_distance(graph = grafo, directed = FALSE)
grado_prom <- mean(degree(graph = grafo))
sd_grado <- sd(degree(graph = grafo))
num_clan <- length(largest.cliques(graph = g_obama_sk)[[1]])
densidad <- edge_density(grafo)
transitividad <- transitivity(graph = grafo, type = "global")
asortatividad <- assortativity_degree(graph = grafo, directed= F)
datos <- rbind(dist_geo, grado_prom, sd_grado, num_clan, densidad, transitividad, asortatividad)
colnames(datos) <- presi
return(data.frame(round(datos, 3)))
}
cbind(estad(Compg_bush_sk, "Bush"),estad(Compg_obama_sk, "Obama"), estad(Compg_trump_sk, "Trump"), estad(Compg_biden_sk, "Biden"))
top <- function(grafo){
vec <- eigen_centrality(graph = grafo, scale = T)$vector
vec_ord <- sort(vec, decreasing = T)
eig_ord <- data.frame("word"=names(vec_ord), "eig"=vec_ord)
rownames(eig_ord) <- NULL
return(eig_ord)
}
top(Compg_bush_sk)[1:10,]
top(Compg_obama_sk)[1:10,]
top(Compg_trump_sk)[1:10,]
top(Compg_biden_sk)[1:10,]
Agrupamiento <- function(grafo, presi, col_osc, col_cl){
lista <- NULL
# partición del grafo
lista[[1]] <- agrup <- cluster_fast_greedy(grafo)
# se asigna un color diferente a los vertices del grupo más grande
V(grafo)$color <- ifelse(agrup$membership==order(sizes(agrup), decreasing = T)[1], col_osc, col_cl)
# Grafo
set.seed(123)
lista[[2]] <-plot(grafo, layout = layout_with_fr, vertex.color = adjustcolor(V(grafo)$color, 0.1), vertex.frame.color = V(grafo)$color, vertex.size = 2*strength(grafo), vertex.label = NA, main = paste0("Partición componente conexa\n Skip-grama ", presi))
return(lista)
}
Agrup_bush <-Agrupamiento(Compg_bush_sk, "Bush", "red4", "red")
Agrup_obama <-Agrupamiento(Compg_obama_sk, "Obama", "dodgerblue4", "deepskyblue")
Agrup_trump <-Agrupamiento(Compg_trump_sk, "Trump", "red4", "red")
Agrup_biden <-Agrupamiento(Compg_biden_sk, "Biden", "dodgerblue4", "deepskyblue")
med_agrup <- function(part, grafo, presi){
lista <- NULL
# número de grupos
num_grup <- length(part)
# tamaño grupo más grande
tam_grup_mayor <- sort(sizes(part), decreasing = T)[1]
# tamaño grupo más pequeño
tam_grup_menor <- sort(sizes(part), decreasing = F)[1]
lista[[1]] <- data.frame(rbind(num_grup, tam_grup_mayor, tam_grup_menor))
colnames(lista[[1]]) <- presi
lista[[2]] <- top(grafo)%>%
inner_join(data.frame("word"=part$names, "grupo"=part$membership), by=c("word"="word"))%>%
arrange(desc(eig)) %>%
filter(grupo==order(sizes(part), decreasing = T)[1])
return(lista)
}
MedAgrup_bush <- med_agrup(Agrup_bush[[1]], Compg_bush_sk, "Bush")
MedAgrup_obama <- med_agrup(Agrup_obama[[1]], Compg_obama_sk, "Obama")
MedAgrup_trump <- med_agrup(Agrup_trump[[1]], Compg_trump_sk, "Trump")
MedAgrup_biden <- med_agrup(Agrup_biden[[1]], Compg_biden_sk, "Obama")
cbind(MedAgrup_bush[[1]],MedAgrup_obama[[1]], MedAgrup_trump[[1]], MedAgrup_biden[[1]] )
MedAgrup_bush[[2]][1:5,]
MedAgrup_obama[[2]][1:5,]
MedAgrup_trump[[2]][1:5,]
MedAgrup_biden[[2]][1:5,]
##### Pruebas de normalidad de las frecuencias
a<-shapiro.test(frec$Bush)
suppressMessages(suppressWarnings(library(car)))
##### Pruebas de normalidad de las frecuencias
Normalidad <- c(shapiro.test(frec$Bush)$p.value,
shapiro.test(frec$Obama)$p.value,
shapiro.test(frec$Trump)$p.value,
shapiro.test(frec$Biden)$p.value)
names(Normalidad) <- c("Bush", "Obama", "Trump", "Biden")
Normalidad
##### al no haber normalidad en las frecuencias relativas de ningún discruso se usa la prueba de Levene para ver si hay homocedasticidad
PV<-matrix(NA, 4, 4)
PV[1,2]<- (leveneTest(c(frec$Bush[frec$Bush!=0], frec$Obama[frec$Obama!=0]),
c(rep("Bush",809),rep("Obama",1066)))$`Pr(>F)`)[1]
PV[1,3]<-(leveneTest(c(frec$Bush[frec$Bush!=0], frec$Trump[frec$Trump!=0]),
c(rep("Bush",809),rep("Trump",365)))$`Pr(>F)`)[1]
PV[1,4]<-(leveneTest(c(frec$Bush[frec$Bush!=0], frec$Biden[frec$Biden!=0]),
c(rep("Bush",809),rep("Biden",509)))$`Pr(>F)`)[1]
PV[2,3]<-(leveneTest(c(frec$Obama[frec$Obama!=0], frec$Trump[frec$Trump!=0]),
c(rep("Obama",1066),rep("Trump",365)))$`Pr(>F)`)[1]
PV[2,4]<-(leveneTest(c(frec$Obama[frec$Obama!=0], frec$Biden[frec$Biden!=0]),
c(rep("Obama",1066),rep("Biden",509)))$`Pr(>F)`)[1]
PV[3,4]<-(leveneTest(c(frec$Trump[frec$Trump!=0], frec$Biden[frec$Biden!=0]),
c(rep("Trump",365),rep("Biden",509)))$`Pr(>F)`)[1]
colnames(PV)<-rownames(PV)<- c("Bush", "Obama", "Trump", "Biden")
round(PV,4)
# Finn Arup Nielsen, escala de -5 a 5.
AFINN <- read_table2("AFINN-111.txt", col_names = c("word", "score")) %>%
mutate(sentiment=case_when(score < 0 ~ "negative",
score > 0 ~ "positive",
score == 0 ~ "0"))
# aif Mohammad and Peter Turney, clasificacion binaria (+/-) y algunas categorias
negative_NRC <- read_table2("NRC-Emotion-Lexicon/OneFilePerEmotion/negative-NRC-Emotion-Lexicon.txt", col_names = c("word0", "punt")) %>%
mutate(sentiment0=case_when(punt==1 ~ "negative",
punt==0 ~ "positive")) %>%
select(word0, sentiment0)
positive_NRC <- read_table2("NRC-Emotion-Lexicon/OneFilePerEmotion/positive-NRC-Emotion-Lexicon.txt", col_names = c("word1", "punt")) %>%
mutate(sentiment1=case_when(punt==1 ~ "positive",
punt==0 ~ "negative")) %>%
select(word1, sentiment1)
NRC <- negative_NRC %>% full_join(positive_NRC, by=c("word0"="word1", "sentiment0"="sentiment1")) %>%
group_by(word0) %>%
mutate(rep=n(), sentiment=sentiment0, word=word0) %>%
select(word, sentiment)
table(AFINN$sentiment)
table(sentiments$sentiment)
table(NRC$sentiment)
text_bush_bi <- text_bush_st %>%
unnest_tokens(tbl = ., input = text, output = bigram, token = "ngrams", n = 2) %>%
filter(!is.na(bigram))
text_obama_bi <- text_obama_st %>%
unnest_tokens(tbl = ., input = text, output = bigram, token = "ngrams", n = 2) %>%
filter(!is.na(bigram))
text_trump_bi <- text_trump_st %>%
unnest_tokens(tbl = ., input = text, output = bigram, token = "ngrams", n = 2) %>%
filter(!is.na(bigram))
text_biden_bi <- text_biden_st %>%
unnest_tokens(tbl = ., input = text, output = bigram, token = "ngrams", n = 2) %>%
filter(!is.na(bigram))
data.frame("Presidente"=c("Bush", "Obama", "Trump", "Biden"), "Num_tokens"=c(dim(text_bush_bi)[1], dim(text_obama_bi)[1], dim(text_trump_bi)[1], dim(text_biden_bi)[1]))
cbind(
head(text_bush_bi, n = 10) %>% rename(line_Bush=line, bigram_Bush=bigram),
head(text_obama_bi, n = 10) %>% rename(line_Obama=line, bigram_Obama=bigram),
head(text_trump_bi, n = 10) %>% rename(line_Trump=line, bigram_Trump=bigram),
head(text_biden_bi, n = 10) %>% rename(line_Biden=line, bigram_Biden=bigram)
)
cbind(text_bush_bi %>%
count(bigram, sort = TRUE) %>%
head(n = 10) %>%
rename(bigram_Bush=bigram, n_Bush=n),
text_obama_bi %>%
count(bigram, sort = TRUE) %>%
head(n = 10) %>%
rename(bigram_Obama=bigram, n_Obama=n),
text_trump_bi %>%
count(bigram, sort = TRUE) %>%
head(n = 10) %>%
rename(bigram_Trump=bigram, n_Trump=n),
text_biden_bi %>%
count(bigram, sort = TRUE) %>%
head(n = 10) %>%
rename(bigram_Biden=bigram, n_Biden=n))
#--------------------------------------------------------------------------- Republicanos
cbind(head(text_bush_bi_counts, n = 20) %>% rename(word1_Bush=word1, word2_Bush=word2, weight_Bush=weight),
head(text_trump_bi_counts, n = 20) %>% rename(word1_Trump=word1, word2_Trump=word2, weight_Trump=weight))
#--------------------------------------------------------------------------- Demócratas
cbind(head(text_obama_bi_counts, n = 20) %>% rename(word1_Obama=word1, word2_Obama=word2, weight_Obama=weight),
head(text_biden_bi_counts, n = 20) %>% rename(word1_Biden=word1, word2_Biden=word2, weight_Biden=weight))
names(strength(Compg_bush)) %>%
inner_join(NRC)
#---------------------------------------------------------------------------------- Bush
# grafo con umbral=2
g_bush1 <- text_bush_bi_counts %>%
filter(weight > 1) %>%
graph_from_data_frame(directed = FALSE)
# grafo con umbral=1
g_bush0 <- text_bush_bi_counts %>%
filter(weight > 0) %>%
graph_from_data_frame(directed = FALSE)
# grafo inducido por la componente conexa más grande
V(g_bush0)$cluster <- clusters(graph = g_bush0)$membership
Compg_bush <- induced_subgraph(graph = g_bush0, vids = which(V(g_bush0)$cluster == which.max(clusters(graph = g_bush0)$csize)))
# Grafos
par(mfrow=c(1,2))
set.seed(1234)
plot(g_bush1, layout = layout_with_fr, vertex.color = "firebrick2", vertex.frame.color = "firebrick2", vertex.size = 3, vertex.label.color = 'black', vertex.label.cex = 1, vertex.label.dist = 1, main = "Bush\n umbral = 2")
set.seed(123)
plot(g_bush0, layout = layout_with_fr, vertex.color = "firebrick2", vertex.frame.color = "firebrick2", vertex.size = 3, vertex.label = NA, vertex.label.color = 'black', vertex.label.cex = 1, vertex.label.dist = 1, main = "Bush\n umbral = 1")
# componente gigante
par(mfrow = c(1,1), mar = c(1,1,2,1), mgp = c(1,1,1))
# tamaño de vertices según la fuerza del mismo, grosor de aristas según la proporción del peso de la misma
#vector de labels para vertices con fuerza mayor que 3
nombres<-ifelse(strength(Compg_bush)>3, names(strength(Compg_bush)), NA)
set.seed(1234)
plot(Compg_bush, layout = layout_with_kk, vertex.color = adjustcolor("firebrick2", 0.1), vertex.frame.color = "firebrick2", vertex.size = 2*strength(Compg_bush), vertex.label=nombres, vertex.label.color = 'black', vertex.label.cex = 0.6, vertex.label.dist = 1, edge.width = 3*E(g_bush0)$weight/max(E(g_bush0)$weight))
title(main = "Componente conexa - Bigrama Bush", outer = T, line = -1)
#---------------------------------------------------------------------------------------- Biden
##### definir una red a partir de la frecuencia (weight) de los bigramas
g_biden_sk <- text_biden_skip_counts %>%
filter(weight > 0) %>%
graph_from_data_frame(directed = FALSE)
g_biden_sk <- igraph::simplify(g_biden_sk)
# grafo inducido por la componente conexa
V(g_biden_sk)$cluster <- clusters(graph = g_biden_sk)$membership
Compg_biden_sk <- induced_subgraph(graph = g_biden_sk, vids = which(V(g_biden_sk)$cluster == which.max(clusters(graph = g_biden_sk)$csize)))
### Grafos
par(mfrow = c(1,1), mar = c(1,1,2,1), mgp = c(1,1,1))
# tamaño de vertices según la fuerza del mismo
set.seed(123)
plot(Compg_biden_sk, layout = layout_with_fr, vertex.color = adjustcolor("dodgerblue4", 0.1), vertex.frame.color = "dodgerblue4", vertex.size = 2*strength(Compg_biden_sk), vertex.label = NA)
title(main = "Componente conexa - Skip-grama Biden", outer = T, line = -1)
estad <- function(grafo, presi){
dist_geo <- mean_distance(graph = grafo, directed = FALSE)
grado_prom <- mean(degree(graph = grafo))
sd_grado <- sd(degree(graph = grafo))
num_clan <- length(largest.cliques(graph = g_obama_sk)[[1]])
densidad <- edge_density(grafo)
asortatividad <- assortativity_degree(graph = grafo, directed= F)
datos <- rbind(dist_geo, grado_prom, sd_grado, num_clan, densidad, asortatividad)
colnames(datos) <- presi
return(data.frame(round(datos, 3)))
}
cbind(estad(Compg_bush_sk, "Bush"),estad(Compg_obama_sk, "Obama"), estad(Compg_trump_sk, "Trump"), estad(Compg_biden_sk, "Biden"))
top <- function(grafo){
vec <- eigen_centrality(graph = grafo, scale = T)$vector
vec_ord <- sort(vec, decreasing = T)
eig_ord <- data.frame("word"=names(vec_ord), "eig"=vec_ord)
rownames(eig_ord) <- NULL
return(eig_ord)
}
top(Compg_bush_sk)[1:10,]
top(Compg_obama_sk)[1:10,]
top(Compg_trump_sk)[1:10,]
top(Compg_biden_sk)[1:10,]
Agrupamiento <- function(grafo, presi, col_osc, col_cl){
lista <- NULL
# partición del grafo
lista[[1]] <- agrup <- cluster_fast_greedy(grafo)
# se asigna un color diferente a los vertices del grupo más grande
V(grafo)$color <- ifelse(agrup$membership==order(sizes(agrup), decreasing = T)[1], col_osc, col_cl)
# Grafo
set.seed(123)
lista[[2]] <-plot(grafo, layout = layout_with_fr, vertex.color = adjustcolor(V(grafo)$color, 0.1), vertex.frame.color = V(grafo)$color, vertex.size = 2*strength(grafo), vertex.label = NA, main = paste0("Partición componente conexa\n Skip-grama ", presi))
return(lista)
}
Agrup_bush <-Agrupamiento(Compg_bush_sk, "Bush", "red4", "red")
Agrup_obama <-Agrupamiento(Compg_obama_sk, "Obama", "dodgerblue4", "deepskyblue")
Agrup_trump <-Agrupamiento(Compg_trump_sk, "Trump", "red4", "red")
Agrup_biden <-Agrupamiento(Compg_biden_sk, "Biden", "dodgerblue4", "deepskyblue")
med_agrup <- function(part, grafo, presi){
lista <- NULL
# número de grupos
num_grup <- length(part)
# tamaño grupo más grande
tam_grup_mayor <- sort(sizes(part), decreasing = T)[1]
# tamaño grupo más pequeño
tam_grup_menor <- sort(sizes(part), decreasing = F)[1]
lista[[1]] <- data.frame(rbind(num_grup, tam_grup_mayor, tam_grup_menor))
colnames(lista[[1]]) <- presi
lista[[2]] <- top(grafo)%>%
inner_join(data.frame("word"=part$names, "grupo"=part$membership), by=c("word"="word"))%>%
arrange(desc(eig)) %>%
filter(grupo==order(sizes(part), decreasing = T)[1])
return(lista)
}
MedAgrup_bush <- med_agrup(Agrup_bush[[1]], Compg_bush_sk, "Bush")
MedAgrup_obama <- med_agrup(Agrup_obama[[1]], Compg_obama_sk, "Obama")
MedAgrup_trump <- med_agrup(Agrup_trump[[1]], Compg_trump_sk, "Trump")
MedAgrup_biden <- med_agrup(Agrup_biden[[1]], Compg_biden_sk, "Obama")
cbind(MedAgrup_bush[[1]],MedAgrup_obama[[1]], MedAgrup_trump[[1]], MedAgrup_biden[[1]] )
MedAgrup_bush[[2]][1:5,]
MedAgrup_obama[[2]][1:5,]
MedAgrup_trump[[2]][1:5,]
MedAgrup_biden[[2]][1:5,]
med_agrup <- function(part, grafo, presi){
lista <- NULL
# número de grupos
num_grup <- length(part)
# tamaño grupo más grande
tam_grup_mayor <- sort(sizes(part), decreasing = T)[1]
# tamaño grupo más pequeño
tam_grup_menor <- sort(sizes(part), decreasing = F)[1]
lista[[1]] <- data.frame(rbind(num_grup, tam_grup_mayor, tam_grup_menor))
colnames(lista[[1]]) <- presi
lista[[2]] <- top(grafo)%>%
inner_join(data.frame("word"=part$names, "grupo"=part$membership), by=c("word"="word"))%>%
arrange(desc(eig)) %>%
filter(grupo==order(sizes(part), decreasing = T)[1])
return(lista)
}
MedAgrup_bush <- med_agrup(Agrup_bush[[1]], Compg_bush_sk, "Bush")
MedAgrup_obama <- med_agrup(Agrup_obama[[1]], Compg_obama_sk, "Obama")
MedAgrup_trump <- med_agrup(Agrup_trump[[1]], Compg_trump_sk, "Trump")
MedAgrup_biden <- med_agrup(Agrup_biden[[1]], Compg_biden_sk, "Biden")
cbind(MedAgrup_bush[[1]],MedAgrup_obama[[1]], MedAgrup_trump[[1]], MedAgrup_biden[[1]] )
MedAgrup_bush[[2]][1:5,]
MedAgrup_obama[[2]][1:5,]
MedAgrup_trump[[2]][1:5,]
MedAgrup_biden[[2]][1:5,]
